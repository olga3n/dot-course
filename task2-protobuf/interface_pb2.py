# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: interface.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
#from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

#_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='interface.proto',
  package='',
  serialized_pb=_b('\n\x0finterface.proto\"Y\n\x03Tag\x12\x0c\n\x04text\x18\x01 \x02(\t\x12\x0b\n\x03url\x18\x02 \x01(\t\x12\x11\n\tfont_size\x18\x03 \x01(\x05\x12\x10\n\x08rotation\x18\x04 \x01(\x05\x12\x12\n\nfont_color\x18\x05 \x01(\x0c\"\x1d\n\x08TagCloud\x12\x11\n\x03tag\x18\x01 \x03(\x0b\x32\x04.Tag')
)
#_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_TAG = _descriptor.Descriptor(
  name='Tag',
  full_name='Tag',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='text', full_name='Tag.text', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='url', full_name='Tag.url', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='font_size', full_name='Tag.font_size', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='rotation', full_name='Tag.rotation', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='font_color', full_name='Tag.font_color', index=4,
      number=5, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
#  oneofs=[
#  ],
  serialized_start=19,
  serialized_end=108,
)


_TAGCLOUD = _descriptor.Descriptor(
  name='TagCloud',
  full_name='TagCloud',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='tag', full_name='TagCloud.tag', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
#  oneofs=[
#  ],
  serialized_start=110,
  serialized_end=139,
)

_TAGCLOUD.fields_by_name['tag'].message_type = _TAG
DESCRIPTOR.message_types_by_name['Tag'] = _TAG
DESCRIPTOR.message_types_by_name['TagCloud'] = _TAGCLOUD

Tag = _reflection.GeneratedProtocolMessageType('Tag', (_message.Message,), dict(
  DESCRIPTOR = _TAG,
  __module__ = 'interface_pb2'
  # @@protoc_insertion_point(class_scope:Tag)
  ))
#_sym_db.RegisterMessage(Tag)

TagCloud = _reflection.GeneratedProtocolMessageType('TagCloud', (_message.Message,), dict(
  DESCRIPTOR = _TAGCLOUD,
  __module__ = 'interface_pb2'
  # @@protoc_insertion_point(class_scope:TagCloud)
  ))
#_sym_db.RegisterMessage(TagCloud)


# @@protoc_insertion_point(module_scope)
